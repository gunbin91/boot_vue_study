◆ Provide/inject
props로 하위 컴포넌트에 데이터를 전달할 수 있지만,
댑스가 깊어질수록 이러한 방법이 어려워 지기 때문에 provide/inject방식을 사용한다.

▶ Provice
하위 컴포넌트 항목에 데이터를 제공하려면 
상위 컴포넌트 setup()함수에서 provide함수로 제공해 주면 된다.
- provice( '키', '벨류');
=> 벨류값은 ref등의 반응형데이터를 포함한 모든 유형이 가능하다.

▶ Inject
상위 컴포넌트에서 넘겨준 데이터를 받을 때 사용
하위 컴포넌트 setup()함수에서 inject()함수로 받는다.
=> 댑스에 상관없이 하위 컴포넌트라면 전달받을 수 있다.
- inject('키') OR inject('키', '디폴트값');

▶ 데이터 변경
데이터를 제공하는 상위 컴포넌트에서 값의 제공과 변경 모두 제어하는 것이 권장사항이기 때문에
데이터를 변경할 수 있는 메서드도 함께 provide해주는 것이 좋다.
cf) 반응형 데이터로 받을 시 하위 컴포넌트에서도 값변경은 가능하다... ex) ref(index('키')) [권장사항X]

// provider //
const message = ref('메시지');
const updateMessage  = (value) =>{
	message.value = value
}
provide('message', {message, updateMessage})

----------------------------------------------------------------

// Inject //
const {message, updateMessage} = inject('message')
updateMessage('변경값');

** 하위 컴포넌트에서 값 변경을 막으려면 readonly를 사용하면 된다.
ex) provide('키', readonly(벨류));

▶ AppLevel Provide
최상위 컴포넌트인 App에서 Provide하여 모든 컴포넌트에서 inject하여 사용할 수 있는
전역 데이터를 생성할 수 있다.

ex)
const app = createApp(App);
app.provide('test', '테스트입니다.');
app.component("AppCard", AppCard);
app.mount("#app");

=> 대부분의 createApp에서 하는 작업은 mount되기 전에 해야한다.