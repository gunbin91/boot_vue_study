▶ 로그인
1. 로그인처리 시작: ApiAuthController 43 - /signin
2. 아이디/비번 체크: ApiAuthController 53 - userService.checkLogin()
** 파라미터를 ReqLoginDto로 받아 SessionVo객체로 다시 만들어 리턴해 주는데
공통 RequestVo로 받으면 문제가 되는지?
** 로그인 체크부분(비밀번호 불일치 등등) 공통 펑션으로 분리하는것이 좋아보임
** 134 세션Vo에 roles가 USER로 현재 고정되어 있으니, 추후 필요시에 유저롤 테이블추가도 고려해 봐야할듯

3. Jwt토큰발급: ApiAuthController  62 - userService.convertLoginToken()
4. Jwt토큰 생성: JwtTokenUtil 77 - doGenerateToken()
- setClaims: 유저 정보를 담고 있는 클레임객체 설정
- setExpiration: 토큰 만료시간 설정
- signWith: 서버 시크릿 키 지정 (HS512) => 시크릿키는 application-local.yml 프로퍼티로 설정돼있음

5. 프론트서버 토큰저장: index.js 176 
context.commit('SET_ACCESS_TOKEN', token)
context.commit('SET_MY_INFO', myInfo)
=> index.js 180 로컬스토리지에도 리프레쉬토큰으로 추정되는것을 저장하고 있으나,
백엔드에서 넘겨주는 값은 없어보임 - 책임님께 확인 후 개발필요
=> index.js 54 세션 스토리지에 accessToken으로 저장되고 있는것을 확인할 수 있다.

▶ spring security config
1. 필터 무시경로 설정 SecurityConfig.java 52 
=> .requestMatchers(PathRequest.toStaticResources().atCommonLocations());
정적 리소스는 무시하는 코드(resource디렉토리 하위...)이기 때문에 그런부분은 신경쓰지 않아도 됨

2. SecurityConfig.java  63 ...
- httpBasic().disable() : 시큐리티 설정하게 되면 비인증시 로그인페이지로 가게되는데 이를 비활성화
- .permitAll(): 인증절차 없이 접근가능하도록 경로설정
=> 만약 사용자 레벨별로 접근설정이 필요할 경우 hasAnyRole("ADMIN(롤명)")
- 403, 401리턴페이지 핸들링을 위함
: exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
- 필터등록
: addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);

▶ Jwt Filter
1. 필터무시: JwtRequestFilter.java 54
=> 해당 무시되는 경로들도 추후 프로퍼티 파일에 따로 분리되면 좋을듯
2. 토큰가져오기: JwtRequestFilter.java 59
=> 헤더에서 authorization(프로퍼티에 있음)값을 가져옴 - 토큰값
=> 프론트 토큰인증시 세션스토리지에서 꺼내온 토큰을 다시 헤더에 담아서 넘겨주는 것 같음
3. 토큰검사 74
=> 토큰이 없을 시 패스.. 로그인이 필요한 페이지일경우는??
=> 프론트에서 체크되고 있는 부분인지 확인필요 ( 뷰공부 )
4. 토큰값으로 유저정보겟 77
5. SecurityContextHolder.getContext().getAuthentication() 81
: 인증된 사용자일 경우에만 유저정보를 담고있는 객체를 리턴
없을경우 다시 컨텍스트에 추가 103
** 토큰만 있고, 인증되지 않은 사용자이기 때문에 토큰 유효성 검사도 추가로 필요해보임
** JwtTokenUtil.java 91에 밸리데이션 체크가 있음
** 찾아보니 여러 케이스별 익셉션이 있어서 해당 익셉션 케이스별로 에러체크 추가해주면 좋을듯

http://localhost:8080/api/login?username=gunbin&password=1234
http://localhost:8080/api/call