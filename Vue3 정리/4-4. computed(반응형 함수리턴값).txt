◆ computed
: 템플릿 문법({{ }})에서 계산식 등의 표현은 가독성을 떨어뜨리고 유지보수를 어렵게 만든다.
따라서 computed() 콜백함수 를 통해 계산된 속성값을 사용한다.

▶ 사용법 및 사용이유?
ex)
----------------------------------------------------------------------------------------
<template>
  <div>
    {{ hasLeacture }}
  </div>
</template>

<script>
import { reactive, computed } from "vue";

export default {
  setup() {
    const teacher = reactive({
      name: "김수환무",
      leactures: ["HTML", "CSS", "Vue3"],
    });

    const hasLeacture = computed(() => {
      return teacher.leactures.length > 0 ? "잇" : "없";
    });

    return {
      teacher,
      hasLeacture,
    };
  },
};
</script>

----------------------------------------------------------------------------------------
=> computed()대신 일반 함수를 사용할수도 있지만,
** computed()를 사용하는 이유는 캐싱때문이다. 
일반 함수를 사용할 경우 매번 함수가 호출되지만,
computed()는 반응형 상태의 변수가 변경이 될 때만 호출이된다.


▶ computed()로 바인딩된 변수값 변경
: computed()로 할당된 변수는 readonly형태로 반환이 된다. 
따라서 기본적으로는 변경이 불가하다. 
ex)
----------------------------------------------------------------------------------------
const hasLeacture = computed(() => {
  return teacher.leactures.length > 0 ? "잇" : "없";
});
----------------------------------------------------------------------------------------
hasLeacture = '수정'; => 불가!!!!

** 그렇기 때문에 computed()안에 getter와 setter함수로 구성하여 변경 가능하도록 만들 수 있다.
ex)
----------------------------------------------------------------------------------------
const firstName = ref('홍');
const lastName = ref('길동');

const fullName = computed({
  get() {
    return firstName.value + ' ' + lastName.value;
  },
  set(newValue) {
    [firstName.value, lastName.value] = newValue.split(' ');
  },
});

fullName = '장 길산';	// => 자동으로 set(newValue)가 호출된다.
console.log(fullName);	// => 자동으로 get()이 호출된다.
----------------------------------------------------------------------------------------