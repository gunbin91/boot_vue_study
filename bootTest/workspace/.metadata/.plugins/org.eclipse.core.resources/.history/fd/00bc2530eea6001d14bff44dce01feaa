package com.example.demo.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.domain.LoginDto;
import com.example.demo.domain.TokenDto;
import com.example.demo.domain.UserDto;
import com.example.demo.repository.UserRepository;
import com.example.demo.util.TokenProvider;

@RestController
@RequestMapping("/api")
public class JwtTestController {
	
	@Autowired
	private UserRepository repository;
	
	@Autowired
	private TokenProvider tokenProvider;
	
	@GetMapping("/test")
	public ResponseEntity<TokenDto> test(LoginDto params, HttpServletRequest request, HttpServletResponse response){
		System.out.println(params);
		
		  String token = null; 
		  UserDto loginUser = repository.findUser(params);
		  if(loginUser == null) { return null; }
		  else {
			  System.out.println(loginUser);
			  token = tokenProvider.createToken(loginUser); 
			  System.out.println("토큰: " + token); 
			  System.out.println("토큰으로 부터 불러온 아이디: " +  tokenProvider.getUsernameFromToken(token));
			  System.out.println("토큰으로 부터 불러온 롤: " +  tokenProvider.getRolesFromToken(token));
			  
			  UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken 
			  = (UsernamePasswordAuthenticationToken) tokenProvider.getAuthentication(token);
              usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
              SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
              
			  System.out.println(SecurityContextHolder.getContext());
			  System.out.println(SecurityContextHolder.getContext().getAuthentication());

			  // response헤더에 토큰셋팅
			  response.setHeader("authorization", token);	
		  }
		  
//		  return ResponseEntity.ok((String)tokenProvider.getUsernameFromToken(token));
		  return new ResponseEntity<>(new TokenDto(token), new HttpHeaders(), HttpStatus.OK);
	}
	
	@GetMapping("/test2")
	//@PreAuthorize("hasAnyRole('USER','ADMIN')")
	public ResponseEntity<TokenDto> test2(LoginDto params, HttpServletRequest request, HttpServletResponse response){	
		final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		System.out.println("테스트2: " + authentication.getPrincipal());
		System.out.println("테스트2 겟네임: " + authentication.getName());
		if(authentication == null) {
			return null;
		}
		  
//		  return ResponseEntity.ok((String)tokenProvider.getUsernameFromToken(token));
		  return null;
	}
	
	@GetMapping("/test3")
	public ResponseEntity<TokenDto> login(LoginDto params, HttpServletRequest request, HttpServletResponse response){
		UserDto loginUser = repository.findUser(params);
		String token = tokenProvider.createToken(loginUser);
		response.setHeader("authorization", token);	
		return new ResponseEntity<>(new TokenDto(token), new HttpHeaders(), HttpStatus.OK);
	}
}
