◆ ScriptSetup
: 기존에 setup()함수를 사용한 것을 좀 더 간략화하여 사용할 수 있다.
ex) <script setup></script>

=> 기존 export default { setup () { return {} }, } 구조를 사용하지 않아도 됨

▶ 변수/함수 출력
: 변수/함수 선언만으로 자동 리턴되어 템플릿에서 바로 사용 가능
( setup() 함수에 정의 시 return해야 사용가능 했던 것 )
ex)
-----------------------------------------------------------------------------------
<template>
  <div>{{ hello }}</div>
</template>

<script setup>
const hello = "메롱";
</script>
-----------------------------------------------------------------------------------

▶ 컴포넌트 사용
: 컴포넌트 또한 components에 지정해 주지 않아도 import만으로 바로 사용이 가능
ex)
-----------------------------------------------------------------------------------
<template>
  <ChildTest />
</template>

<script setup>
import ChildTest from "@/components/ChildTest.vue";
</script>
-----------------------------------------------------------------------------------

▶ props, emits 사용( defineProps, defineEmits )
: setup함수의 매개인자인 pros와 context.emits은 script setup에서는 
특정 키워드 함수로 사용이 가능하다.
( 기존 emits: , props: 속성으로 정의하던 것을 그대로 함수 파라미터로 넘겨주면 됨 )

- ex) props
-----------------------------------------------------------------------------------
<script setup>
const props = defineProps({
  param: {
    type: String,
    default: "메롱",
  },
  param2: {
    type: String,
  },
});
</script>
-----------------------------------------------------------------------------------
=> defineProps로 선언된 props객체는 데이터를 받고, 해당 객체로 받은 데이터 사용도 가능

- ex) emit
-----------------------------------------------------------------------------------
...
const emit = defineEmits(['change', 'delete'])
emit('change', param)
-----------------------------------------------------------------------------------
=> emits속성으로 추가하던 함수명을 defineEmits의 배열로 선언하고, 
이렇게 생성된 emit객체는 기존 context.emit객체와 동일하게 사용하면 된다.

▶ slots, attrs사용( useSlots(), useAttrs() )
: 마찬가지로 setup(props, context)의 context.slots, context.attrs를 사용하려면
useSlots(), useAttrs()로 주입받아 사용하면 된다.
ex)
const slots = useSlots();
const attrs = useAttrs();

▶ defineExpose()
: <script setup>를 사용하는 컴포넌트는 기본적으로 컴포넌트간 통신이 막혀있다.
때문에 <script setup>을 사용하는 컴포넌트의 Template Refs나 $parent로 데이터를 가져오는 것이 불가하다
따라서 defineExpose()를 통해 명시적으로 노출해야한다.
ex)
<script setup>
const data = '데이터';
const message= '메시지';
defineExpose( { data, message } );
</script>

** setup(props, context)에서 context.expose로도 접근이 가능하다

▶ <script>와 <script setup> 같이 사용하는 경우

- 한번만 호출할 로직이 있는 경우
: setup()은 컴포넌트 인스턴스 생성시마다 호출되기 때문에,
최초 생성 시 한번만 호출이 필요한 로직이 있는 경우 <script>태그를 공존하여 사용한다

- setup()함수 내에서 정의할 수 없는 옵션값이 필요할때
ex)
export default {
  inheritAttrs: false,
};

- named export를 선언할 때
ex) export const data

▶ Top-level await
:<script setup>내의 Top-level에서 await을 사용할 수 있습니다. 
그리고 코드는 `async setup()` 이렇게 컴파일 됩니다.

ex) 기본적으로 await는 async와 같이 사용해야 하지만
<sciprt setup>에서는 async를 사용하지 않아도 awiat를 사용할 수 있다.