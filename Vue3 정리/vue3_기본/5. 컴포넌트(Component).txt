◆ 컴포넌트(Component)
: UI를 재사용할 수 있도록 정의한 것, 클린한 코드..

▶ 컴포넌트 정의
: 문자열 또는 파일로 정의한다.
- 문자열 템플릿: 자바스크립트 문자열로 템플릿 구성 => 잘 쓰이지 않는다.
- Single file component: 파일로 컴포넌트를 하나하나 분리

▶ SingFileComponent(SFC)정의
: components폴더에 vue파일을 새로 만들어 사용할(분리할)부분만 <template>태그안에 넣어주면 된다.

ex) 컴포넌트 기본구조 예
-------------------------------------------------------------------------------------------
<template>
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    ....
  </nav>
</template>

<script>
export default {
  setup() {
    return {};
  },
};
</script>
-------------------------------------------------------------------------------------------

◆ SingFileComponent(SFC) 등록

▶ 전역등록
: 전역으로 등록된 컴포넌트는 어떤 컴포넌트에서든 사용이 가능하다.
CreateApp객체에 마운트 하기전에 .component로 등록하면 된다.
ex)
------------------------------------------------------------------------------------
import { createApp } from "vue";
import App from "./App.vue";
import AppCard from "@/components/TheCard.vue";	//	등록 컴포넌트

const app = createApp(App)
app.component("AppCard", AppCard);	//	마운트되기전에 컴포넌트 등록
app.mount("#app");
------------------------------------------------------------------------------------
=> 전역 어디에서나 <AppCard>컴포넌트 사용이 가능하다.

** 전역 컴포넌트는 소스 관리(종속관계 등)가 어렵기 때문에 필요시에만 사용하고
대체로 지역 컴포넌트로 사용하는것이 옳다.


▶ 지역등록
1. import 변수 from "파일경로"
ex) import TheNavTest from "./components/TheNav.vue";

2. components: 속성으로 등록
ex)
components: {
    TheNavTest,		//	속성명과 벨류값이 같으면 하나로 표현가능(ES6)
    viewTest: TheView,	//	기본표기법
},

3. 태그명으로 사용 ex) <viewtest/>

ex)
------------------------------------------------------------------------------------
<template>
  <div>
    <TheNavTest></TheNavTest>
    <viewTest></viewTest>
  </div>
</template>

<script>
import TheNavTest from "./components/TheNav.vue";
import TheView from "./components/TheView.vue";

export default {
  setup() {
    return {};
  },
  components: {
    TheNavTest,
    viewTest: TheView,
  },
};
</script>
------------------------------------------------------------------------------------

◆ 컴포넌트 인스턴스 생성
: 컴포넌트는 임폴트 할 때 해당 컴포넌트 안에 스크립트가 한번 실행이 되고, 
사용할 때마다 인스턴스가 생성되어 setup함수를 매번 호출하게된다.
ex) AppCard.vue
------------------------------------------------------------------------------------
<script>
console.log("appcard module");
export default {
  setup() {
    console.log("appcard setup");
    return {};
  },
};
</script>
------------------------------------------------------------------------------------
위처럼 앱카드 컴포넌트 정의 후
- import TheView from "./components/AppCard.vue"; 시 
=> 'appcard module' 스크립트 한번 호출되고,

- <app-card /> 선언 시마다!
=> 셋업 함수안에 정의한 appcard setup 가 호출된다.

◆ 컴포넌트 네이밍 룰
컴포넌트 네이밍 룰은 파스칼케이스/케밥케이스를 따른다.
- 파스칼케이스:	앞 단어 대문자로 단어구분 ex) AppCard
- 케밥케이스:	소문자 하이픈(-)으로 단어구분 ex) app-card

=> 파스칼케이스/케밥케이스 둘 다 인식이 가능하기 때문에
선언 변수명과 사용된 태그명이 달라도 네이밍룰만 따른다면 인식은 가능하다.
ex) components: TheNavTest		/	<the-nav-test>  => 인식가능

** 기본적으로는 파스칼케이스를 권장함

◆ 컴포넌트 구성
- <template> 최상위 태그로 최대 하나만 포함 가능
- <script> 최대 하나
- <script setup> 최대 하나 ( <script>와 공존 가능 )

▶ style
- <style> 여러개 가능
: 스타일이 적용된 컴포넌트가 import되어 있다면 다른 컴포넌트에서도 사용 가능

>> <style scoped>
: 컴포넌트 내부에서만 접근 가능
=> scoped옵션에서 선언된 스타일을 적용할 경우 data-v-7ba5db등의 규칙으로
해당 태그에 고유값이 붙게되어 내부에서만 접근이 가능하다.

>> <style module>
: 해당 태그안에 선언된 스타일을 모듈로 사용할 수 있음
ex) 
<a :class=$style.red/>	=> 태그에서 $style 키워드를 사용하게 되면 모듈 스타일을 객체로 가져옴
<script>
	const style = useCssModule();	=> js에서 모듈을 가져올 수 있음
</script>
<style module>
.red{ color: red !important; }
</style>

>> css의 v-bind
아래와 같이 동적으로 css의 값을 스크립트에서도 바꿀 수 있다.
---------------------------------------------------------------------------
ex) 
<script> 
const color = ref('red'); 
color.value = 'yellow'
</script>

<style>
.red {
	color: v-bind(color) !important;
}
</style>
---------------------------------------------------------------------------