◆ Watch
: 반응형 상태가 변경 되었을때를 감지하여 특정 작업을 수행할 수 있도록 해주는 함수
- 기본형태는
watch(감지할객체, (new,old)함수)

ex) 데이터 변경 예
--------------------------------------------------------------------------------------
<template>
  <div>
    watch: <input type="text" v-model="wath_value"/>
  </div>
</template>

<script>
import { ref, watch } from 'vue';

export default {
  setup () {
    const wath_value = ref('');

  watch(wath_value, (newValue, oldValue) => {
    console.log('newValue: ', newValue);
    console.log('oldValue: ', oldValue);
  });

    return {wath_value}
  }
}
</script>
--------------------------------------------------------------------------------------

▶ watch의 첫번째 매개변수
: 첫번째 매개변수는 다양한 형태가 될 수 있다.
- ex) 겟터함수로 받을 시
watch( () => {return x.value + y.value}, (sumvalue, oldvalue)=>{ });
- ex) 배열로 받을 시
watch([x, ()=> y.value], ([newX, newY]) => {});

주의) wath는 반응형 데이터를 감지하기 때문에 객체의 속성을 첫번째 인자로 받게되면 감지할 수 없다.
따라서 필요 시 객체의 속성값이 아닌 겟터로 전달해 주어야 한다.
ex) watch(() => obj.count, (newValue)=>{});
=> 객체의 값이 변경될 경우에만 트리거가 작동되기 때문에 주의가 필요하다.


▶ watch 즉시실행
: 세번째 인자로 { immediate: true, }를 넘겨주게 되면, 변경이 감지되지 않아도 
최초 즉시실행을 호출할 수 있다.
ex) watch( () => {return x.value + y.value}, (sumvalue, oldvalue)=>{ }, {immediate: true});

▶ computed VS watch
: 두 함수 모두 함수호출을 이용해 값을 변경하는 것은 같다.
하지만 watch는 변경시점에 특정 액션(call api, push route등)이 필요한 경우에 사용하는 것이 좋고
그 외의 경우에는 compute로 구현하는것이 대부분 옳다.

◆ watchEffect
: watch와 비슷한 기능을 하지만 작동 방식이 조금 다르다.
watchEffect는 기본 immediate:true로 최초 실행되고,
함수안에 사용된 반응형데이터의 변경이 일어날 경우 호출된다. (wath는 명시적)
ex) 
watchEffect(()=>{
	console.log(title.value, contents.value);
});
