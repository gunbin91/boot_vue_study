▶ DOM(Document Object Model)
: (웹)문서를 제어하기 위한 객체 모델

- 최상위 노드: document
ex) document.getRootNode()
=> document

- 자식노드: 
document.childNode(1).childeNodes(2) ...
형식으로 접근가능

▶ DOM객체 접근
위 방식으로 접근하기 불편하기 때문에 
실제로는 아래 형식으로 객체를 가져오게 된다.
ex) document.querySelector('h1')

▶ BOM(Browser Object Model)
: 브라우저를 제어하기 위한 객체 모델
ex) window(최상위객체로 생략가능), 
document, history, location, navigator, alert() ...

- window.alert() = alert()

▶ 스크립트 로드
웹문서는 순차적으로 읽어오기 때문에 
스크립트 태그를 먼저 쓰거나 먼저 인클루드하면 dom객체에 접근이 어렵다.

=> 해결 방안 3가지
1. 스크립트 태그를 최하단에 배치한다.
2. window.onload()를 이용하여 스크립트를 사용한다.
=> html, js, css, 외부컨텐츠 등 웹문서가 모두 로드된 이후에 해당 함수가 호출되어
먼저 선언해도 정상 작동!!
3. document.addEventListener('DomContentLoaded')
를 이용하게 되면, 외부컨텐츠를 제외한 dom컨텐츠가 로드된 이후에 작동이 되기 때문에 
onload()보다 빠르다!!
=> 단!!!! 외부에서 불러온 컨텐츠들이 필요한 경우 에러가 발생될 수 있기 때문에 주의해야함

▶ defer
위 문제들이 발생하는 이유는 웹 페이지의 순서가 아래와 같은 방식으로 동작하기 때문이다.
> HTML parsing -> Script fetch -> Script execution

defer속성을 사용할 경우 
HTML parsing과 함께 스크립트 파일을 만나면 script fetch가 비동기로 동시에 이뤄진다!
> HTML parsing,Script fetch -> Script execution

- 사용법
ex) <script src="script.js" defer/>

▶ async
defer와 비슷한 방식으로 동작하지만, sciprt 실행이 먼저 나오게 되면
파싱 도중에 처리되기 때문에 문제가 발생할 수도 있어 주의있게 사용할 필요가 있다.