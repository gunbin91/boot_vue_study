package com.example.demo.util;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.example.demo.domain.User;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.UnsupportedJwtException;

@Component
public class TokenProvider implements Serializable{
	private static final long serialVersionUID = 1L;
	
	/*
	 * private static final String AUTHORITIES_KEY = "auth";
	 * 
	 * private String secret = ""; private long tokenValidityInMilliseconds = 0;
	 * 
	 * private Key key;
	 */
	
	private final String securityKey = "hello world"; // TODO 민감정보는 따로 분리하는 것이 좋다
	private final Long tokenValidityInMilliseconds = 1000 * 60L * 60L * 1L; // 유효시간 1시간
	private static final String AUTHORITIES_KEY = "auth";
	
	public TokenProvider(
			@Value("${spring.jwt.secret") String secret,
			Long tokenValiditySeconds) {
	}
	
	// 토큰 반환
	public String createToken(User user) {
		long now = (new Date()).getTime();
		Date validity = new Date(now + this.tokenValidityInMilliseconds);
		
		return Jwts.builder()
				.setSubject(user.getUsername())
				.setHeader(createHeader())
				.setClaims(createClaims(user)) // 클레임, 토큰에 포함될 정보
				.signWith(SignatureAlgorithm.HS256, securityKey)
				.setExpiration(validity)
				.compact();
	}
	
	private Map<String, Object> createHeader() {
	    Map<String, Object> header = new HashMap<>();
	    header.put("typ", "JWT");
	    header.put("alg", "HS256"); // 해시 256 사용하여 암호화
	    header.put("regDate", System.currentTimeMillis());
	    return header;
	}
	
}
