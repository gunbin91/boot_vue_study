◆ Non-Prop속성
: 자식 컴포넌트에서 props로 받지 않고, 그냥 넘겨주게 되는 속성 또는 이벤트로
부모 컴포넌트의 최상위태그(<template>아래 최상위)로 상속받게 된다.
( props로 정의를 했다면 태그로 상속되지 않음 )
ex)
--------------------------------------------------------------------------------
<template>
  <div>
    <nonPropVue title="제목" contents="내용"/>
  </div>
</template>
--------------------------------------------------------------------------------
=> 부모 태그에서 위와같이 속성을 넘겨주었을때
자식 컴포넌트의 모양이 아래와 같다면
<div title="제목" contents="내용"> 으로 상속되게 된다.
--------------------------------------------------------------------------------
<template>
    <div>
        <h2>NonProp.vue</h2>
    </div>
</template>
--------------------------------------------------------------------------------

▶ class, style Non-Prop속성 병합
: 이미 자식 컴포넌트의 최상위 태그에 넘겨준 속성값이 있다면 기본적으로는 덮어씌워진다.
하지만 class, style 속성은 병합되는 특징이 있다.
ex) <button class="btn">click me</button>
=> <button class="btn large">click me</button>

▶ v-on 이벤트 리스너 Non-Prop 상속
: v-on 이벤트 리스너도 동일하게 최상위 태그로 상속되며,
부모 컴포넌트에서 등록한 함수또한 호출이 가능하다.

▶ Non-Prop 상속 비활성화
: 자식 컴포넌트에서 inheriAttrs속성을 false로 지정하게되면 
Non-Prop속성의 상속을 비활성화 할 수 있게된다.
ex) 
export default {
  inheritAttrs: false,
};

▶ context.attrs ( $attrs )
: Non-Prop속성은 setup(props, context)함수의 context.attrs 속성으로 넘어오게 되며,
inheritAttrs:flase 를 하게 되더라도 해당 객체에는 상속되야하는 속성값이 남아있게 된다.

- props와 마찬가지로 태그 내에서 접근은 $attrs로 할 수 있고,
- v-bind="$attrs" 하게되면 원하는곳에 객체 다중 바인딩을 할 수 있다. (또는 개별속성만..)

▶ 다중루트
: vue2에서는 컴포넌트에서 다중 루트 엘리먼트를 허용하지 않았지만
vue3에서는 다중 루트 엘리먼트를 허용한다

ex) div, button 둘다 최상위 태그
<template>
	<div></div>
	<button></button>
</template>

따라서 Non-Prop속성을 넘겨줄 때 어떤 최상위 태그에 속성을 상속 해야할지에 대한 문제가 생긴다.
그래서 다중 루트 엘리먼트를 사용할 경우 상속받고자 하는 태그에
<button v-bind="$attrs"/> 를 명시해 주는것이 좋다.