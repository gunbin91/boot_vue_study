▶ NPM(Node package Manager)
: 모듈 다운로드 도구

>> npm설치
- Node.js설치 시 npm은 자동으로 설치된다.
- Node.js는 Javascript런타임 환경이다.
스크립트틀 웹브라우저에서 실행 시 웹 어플리케이션
" Node.js환경에서 실행하게 되면 백엔드 어플리케이션

>> 모듈설치
- npm install 패키지명
: 해당 모듈을 다운받고, package.json파일에 해당 모듈과 버전이 자동으로 쓰여진다.
- npm install
반대로, package.json파일에 모듈이름과 버전을 작성하고 npm install하게되면 package.json에 작성된 모듈을 모두 다운받는다.

** 다운받은 모듈은 node_modules라는 폴더안에 다운로드 되어지며
해당 디렉토리가 없는경우 새로 생성됨, pakcage.json도 마찬가지
** install은 줄여서 i로 쓸 수 있음
** 모듈뒤 @버전 으로 원하는 버전을 다운 받을 수 있다.
** 공백으로 구분하여 여러개의 패키지를 한번에 받을 수 있다.
** -global(-g)을 사용하여 전역으로 다운로드 가능 
=> 보통 전역으로 설치하는 경우는 cli같은 모듈..

>> node실행 및 사용
1. 모듈다운 ex) npm install dayjs
2. 모듈임폴트 ex) const dayjs = require('dayjs');
or import {dayjs} from 'dayjs'
3. 노드로 실행 ex) node index.js

▶ package.json 
: 프로젝트에 대한 정보를 가지고 있는 설정 파일
npm init를 이용하여 자동으로 생성 가능하다.

- script
: 프로젝트 실행 시 실행될 명령어
ex) "script": {
	"test": "echo hello"
}
=> npm run test 로 사용가능하다.

- dependencies / devdependencies(--save-dev 패키지)
: 다운받을 모듈을 모아놓은 속성으로 devdependencies는 개발환경에서만 사용할 패키지이며,
다운로드 시 ex) npm install --save-dev dayjs 

** npm5버전 이후부터는 --save옵션이 디폴트로 붙는다.

▶ package-lock.json
: 모듈들의 의존성 관계를 작성해 놓은 파일
(하나의 모듈에서 다른 모듈을 사용할 경우 해당 모듈까지 받아야 하는 구조..)


-- 참고 
https://velog.io/@archivvonjang/npm-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC
