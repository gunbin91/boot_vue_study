◆ 테스트용 REST API 서버준비
: github json server 검색 ( https://github.com/typicode/json-server )
=> 테스트용 REST API 서버

1. npm install -D json-server 
: 전역X 해당 프로젝트에서만 설치(빌드시제외)

2. 프로젝트 루트경로에 db.json파일이 만들어지며,
api요청시 해당 파일의 내용들을 내려준다.

3. npx json-server --watch db.json
: 전역으로 설치하지 않았기 때문에 npx를 붙여서 실행

=> npx json-server --watch db.json --port 5000
포트변경 실행

* vs코드 터미널 오른쪽 +버튼을 통해 여러개의 터미널을 실행할 수 있다.

▶ 사용법예시) 공식사이트 참고
`http://localhost:5000/posts?
    _sort=createdAt
    &_order=desc
    &_page=${params.value.currentPage}
    &_limit=${params.value.limits}
    &contents_like=${params.value.contents_like}`

=> 파라미터 공식사이트 참고

◆ Axios 통신모듈 설치
github axios 공식문서 참고
=> https://github.com/axios/axios

>> npm i axios

▶ Axios 사용
기본적인 사용방법은 ajax와 동일하다.
ex) axios then
----------------------------------------------------------------------------
import axios from "axios";

const fetchPosts = async() =>{
axios.get('http://localhost:5000/posts')
  .then(response=> {
      posts.value = response.data;
      console.log(response)
  }).catch(error => {
      console.log('error: ', error);
  });
}
----------------------------------------------------------------------------

▶ async / await
: 위 axios에서 then을 사용하는 이유는 응답을 기다렸다가 처리하기 위한 동기화작업이다.
따라서 async/await 방법으로 사용하게 되면 then을 쓰지 않아도 된다.
=> 함수앞에 async 키워드를 쓰고, await로 응답이 온 이후에 아래 작업을 시작하도록 한다.

ex) axios async/await
----------------------------------------------------------------------------
const fetchPosts = async () =>{
    const response = await axios.get('http://localhost:5000/posts');
    console.log(response);
}
----------------------------------------------------------------------------

* await는 async없이 단독으로 사용이 불가하다.
단, <script setup>을 사용할 경우 자동으로 async setup()으로 컴파일 되기 때문에
단독으로 사용할 순 있다.(소스상 오류X) 단, 잘못된 방식 (사용할 수 있는것 처럼 보이는 것 )

▶ try / catch
: axios 사용시 try catch를 사용하는 편이 좋다.
ex)
----------------------------------------------------------------------------
try{
    await createPost({
        ...form.value,
        createdAt: Date.now(),
    });
    router.push({name: 'posts'})
}catch (error){
    console.log(error);
}
----------------------------------------------------------------------------


▶ axios 객체로 구성
아래와 같은 방법으로 axios 요청을 할 수도 있다.
ex)1
----------------------------------------------------------------------------
axios({
  method: 'post',
  url: '/user/12345',
  data: {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
});
----------------------------------------------------------------------------

ex) 2
----------------------------------------------------------------------------
axios({
  method: 'get',
  url: 'https://bit.ly/2mTM3nY',
  responseType: 'stream'
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
  });
----------------------------------------------------------------------------