◆ 렌더링
: 화면에 보여지는 것에대한 옵션을 설정할 수 있는 디렉티브들을 알아보자

▶ v-if
: 조건이 true일때만 해당 태그를 렌더링시킨다.
( v-else-if 로 중간 조건도 넣을 수 있다. )
ex)
---------------------------------------------------------------------------------------
<template>
  <div v-if="visible">테스트</div>
  <div v-else>엘스</div>
  <button v-on:click="visible = !visible">체인지</button>
</template>

<script>
import { ref } from "vue";
export default {
  setup() {
    const visible = ref(false);

    return { visible };
  },
};
</script>
---------------------------------------------------------------------------------------

▶ v-show
: v-if와 달리 보여질지 말지에 대한 조건 설정만 가능한 디렉티브
ex)
---------------------------------------------------------------------------------------
<template>
  <div v-show="isShow">테스트</div>
  <button v-on:click="isShow = !isShow">버튼</button>
</template>

<script>
import { ref } from "vue";
export default {
  setup() {
    const isShow = ref(true);
    return { isShow };
  },
};
</script>
---------------------------------------------------------------------------------------

** v-if와 가장큰 차이점은 실제 렌더링 여부이다.
- v-if: 조건이 false일 경우 html요소에서 완전히 삭제또는 렌더링 되지 않는다.
- v-show: 렌더링이 미리 되어있는 상태에서 조건이 false인경우 display:none 처리한다.
=> 즉, 버튼 이벤트처럼 자주 바뀌어야 할 수 있는 구조에서는 v-show가 성능이 우수하고, 아닐경우 v-if가 좋다.

▶ v-for
: 배열을 통해 반복적인 태그들을 생성할 때 사용
- v-for사용 시 :key 속성에 고유값을 필수로 입력해 주어야함(vue2.2.0부터필수)
---------------------------------------------------------------------------------------
<template>
  <div>
    <ul>
      <li v-for="(item, index) in items" :key="item.id">
        인덱스: {{ index }} , 메시지: {{ item.message }}
      </li>
    </ul>
  </div>
</template>

<script>
import { reactive } from "vue";
export default {
  setup() {
    const items = reactive([
      { id: 1, message: "java" },
      { id: 2, message: "html" },
      { id: 3, message: "CSS" },
    ]);

    return { items };
  },
};
</script>
---------------------------------------------------------------------------------------
=> 인덱스와 함께 출력할 수 있으며 ()괄호없이 인덱스를 제거하고도 사용가능

▶ v-for 객체 반복
: 객체에 있는 키와 벨류를 반복으로 나타낼 수도 있다.
ex)
---------------------------------------------------------------------------------------
<ul>
  <li v-for="(value, key, index) in obj" :key="key">
    {{ value }} - {{ key }} - {{ index }}
  </li>
</ul>

<script>
import { reactive } from "vue";
export default {
  setup() {
    const obj = reactive({
      title: "제목",
      author: "홍길동",
      publisthedAt: "2023-01-01",
    });
    return { obj };
  },
};
</script>
---------------------------------------------------------------------------------------
=> 객체 반복은 value, key, index순으로 들어가게 된다.


▶ v-for/v-if
** v-for는 v-if와 함께 쓰는것을 권장하지 않는다.
** 필요한 경우 template를 이용하여 분리해서 사용한다.

ex) <lid v-for="user in users" v-if="user.isActive"> [X]
ex)
---------------------------------------------------------------------------------------
<template>
  <div>
    <ul>
      <template v-for="(item, index) in items" :key="item.id">
        <li v-if="index % 2 == 0">
          인덱스: {{ index }} , 메시지: {{ item.message }}
        </li>
      </template>
    </ul>
  </div>
</template>
---------------------------------------------------------------------------------------
=> 템플릿태그 반복이 아닌, li태그가 반복된다.