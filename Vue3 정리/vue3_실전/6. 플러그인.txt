◆ 플러그인(Plugin)
일반적으로 vue 전역 수준의 기능을 추가할 때 사용하는 기능
- app.component() 로 전역 컴포넌트를 등록 하고자 할 때
- app.directive() 로 커스텀 디렉티브를 등록하고자 할때
- app.provide()로 앱 전체 리소스를 주입할 때
app.config.globalProperties에 연결하여 추가할 수 있다.

* 또는 router등과 같이 전역수준의 라이브러리를 사용할 때

▶ 플러그인 작성
플러그인은 install()메서드를 갖고 있는 객체, 또는 함수로 만들 수 있다.

- 객체로 작성 ex)
--------------------------------------------------------------------------------
const objPlugin = {
	install(app, options){ 
		app.component() 전역 컴포넌트 등록
		app.config.globalProperties 전역 애플리케이션 인스턴스에 속성 추가
		app.directive 커스텀 디렉티브
		app.provide() 리소스
		......
	}
}
export Default objPlugin 
--------------------------------------------------------------------------------

- 함수로 작성 ex)
--------------------------------------------------------------------------------
function funcPlugin(app, options){ }
export Default funcPlugin
--------------------------------------------------------------------------------

=> 작성한 플러그인은 router등록과 마찬가지로 import하여
app.use(플러그인) 시켜주어야 한다.

▶ 사용 예시
ex) src>plugins/person.js
--------------------------------------------------------------------------------
export default{
	install(app, options){
		const person = {
			name: '개발자',
			say(){
				alert(this.name);
			},
		}
		app.config.globalProperties.$pserson = person;
		app.provide('person', person);
	}
}
--------------------------------------------------------------------------------

ex) main.js
--------------------------------------------------------------------------------
import person from './plugins/person';

...
app.use(person, {name: '이름변경가능' });
...
--------------------------------------------------------------------------------

=> 하게 되면 전역에서 $person 이라는 이름으로 person객체의 데이터 사용이 가능하다.

▶ 글로벌 컴포넌트 등록 예시
--------------------------------------------------------------------------------
import AppCard from '@/components/AppCard.vue';
...

export default{
	install(app){
		app.component('AppCard', AppCard);
		...
	}
}
--------------------------------------------------------------------------------
=> 플러그인으로 위와같이 등록하게 되면 전역적으로 import하지 않아도 컴포넌드 사용이 가능하다.

* 단, 이렇게 할 시 import하지 않아 소스상 오류로 보여질 수 있는데 
components.d.ts 파일에 정의하여 해당 오류를 제거할 수도 있고
또는 unplugin-vue-components 모듈을 사용할 수도 있다 (검색하여 참고)

▶ 커스텀 디렉티브
- v로 시작하는 변수 객체를 만들어 정의 ex)
--------------------------------------------------------------------------------
const vFocus = {
	mounted: (el)=>{
		el.focus();	
	}
};
--------------------------------------------------------------------------------
=> v-focus 디렉티브로 사용가능하며, el은 해당 태그엘리먼트

- directives옵션 사용 ex)
--------------------------------------------------------------------------------
export default {
	setup(){ ... },
	directives: {
		focus: { ... }
	}
}
--------------------------------------------------------------------------------

* js파일로 만들어 전역으로 등록도 가능하다.

▶ dayjs 라이브러리
: dayjs라이브러리(날짜 포맷팅)를 예시로 플러그인을 만들어보기

1. npm i dayjs

2. 플러그인 작성(ex) src>plugin>dayjs.js
--------------------------------------------------------------------------------
import dayjs from "dayjs";

export default {
  install(app){
    app.config.globalProperties.$dayjs = dayjs;	//	전역에서 $dayjs로 접근가능
    app.provide('dayjs', dayjs);		//	전역에서 주입받을 수 있게 셋팅
  }
}
--------------------------------------------------------------------------------

3. main.js / app.use(dayjs)로 전역설정

4. 
- 템플릿: {{ $dayjs(날짜데이터).format('YYYY.MM.DD HH:mm:ss') }}
- 스크립트: const dayjs = inject('dayjs'); 하여 동일하게 사용