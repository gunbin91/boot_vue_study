◆ 개발환경셋팅
1. Visual Studio Code 설치
: Vue를 사용할 에디터

2. Plug-in 추천
- korean 언어팩
- indent-rainbow	: 	탭의 가독성을 높여준다.
- auto rename tag	:	시작태그 변경 시 닫는태그도 자동으로 변경해준다.
- CSS peek	:	ctrl+클릭할 시 CSS가 어디에 선언됐는지 찾아줌
- Live Server	:	코드가 변경이 되었을때 자동으로 서버에 반영?
- ESLint		:	코드에 에러가 있는지 검사해줌
- Volar		:	vue3용 공식 에디터 플러그인
- vue vscode snippets	:	싱글파일 컴포넌트를 빠르게 생성해줌
- HTML to CSS autocompletion
- HTML CSS Support	:	CSS 자동완성기능


- 크롬 웹스토어 : Vue.js devtools(레거시X)
=> 개발자모드

▶ Vue?
vue.js의 큰 특징은 아래 두가지다.
- 선언적 렌더링: 템플릿 구문 {{ 데이터 }}를 활용하여 데이터를 선언적으로 출력(렌더링)
	=> 데이터만 바꿔도 템플릿 구문안에 출력된 데이터가 실시간으로 동시에 바뀐다
- 반응성: javascript상태 변경을 자동으로 추적하고 변경이 발생하면 dom을 효율적으로 업데이트


◆ 컴포넌트
컴포넌트를 사용하게 되면 UI를 재사용할 수 있는 장점이 있으며,
코드가 더 클린해질 수 있다.

컴포넌트는 문자열템플릿/싱글파일컴포넌트로 구현할 수 있지만,
주로 실무에서는 싱글파일 컴포넌트를 사용한다.

▶ 문자열템플릿
: 문자열로 템플릿 html구성을 만들어 컴포넌트로 만들어 압축하여 태그명으로 사용
ex) 
const AppNav = {
	template:`
		<nav>
		<h2>nav</h2>
		<ul>
		<li>메뉴1</li> ....
		</ul>
		</nav>
		`
}
const app = Vue.createApp();
app.component("appnav", AppNav);
=> 위와 같이 하게되면 <AppNav>태그를 사용할 수 있게 되며 변수로 정의한 html이 그대로 들어간다.

▶ Single File Component
: 컴포넌트를 .vue파일로 만들어 <template>태그로 구성된 컴포넌트를 만들어 임폴트해서 사용