◆ 이벤트처리
: 이벤트 처리는 v-on: 디렉티브로 사용할 수 있으며
자주 사용되므로 @로 단축표현으로 표현 가능하다.

--------------------------------------------------------------------------------------
ex)
<template>
  <div>
    <button @click="test('hello', $event)" value="qkqh"> on click </button>
  </div>
</template>

<script>
export default {
  setup () {
    const test = (msg, event) => {
      console.log(msg);
      console.log(event.target);
      console.log(event.target.value);
    }

    return {test}
  }
}
</script>
--------------------------------------------------------------------------------------
=> event객체를 매개인자로 받을 경우 위와 같이 $event로 넘겨줄 수 있으며
=> 이벤트 객체를 쓰지 않을때는 이벤트 객체를 넘겨주지 않으면 되고, 자동으로 앞에 $event=> 수식어가 표기된다.

▶ 이벤트 수식어
: 이벤트 객체를 제어할때 공통적으로 자주 쓰이게 되는 함수들을 자동으로 호출하도록
수식어를 덧붙일 수 있다.
.stop = e.stopPropagation()	//	다른 객체로 이벤트 전파방지
.prevent = e.prevenDefault()	//	이벤트 기본기능 제거
.capture			//	캡쳐링모드로 이벤트 발생 ( 캡쳐링/버블링 참고 )
.self			//	클릭한 요소만 이벤트 실행 ( 이벤트 전파되지 않는다 )
.once			//	최초 한번만 이벤트 실행
.passive			//	scroll과 함께 쓰이는데... 자세한건 검색..(모바일 기능개선??)

** 수식어 연결도 가능 ex) @click.stop.prevent=""
--------------------------------------------------------------------------------------
ex)
<template>
  <div>
    <button @click.stop="test('hello', $event)" value="qkqh"> on click </button>
  </div>
</template>
--------------------------------------------------------------------------------------

▶ 키 수식어 ( 필요할때 검색해서 사용 )
.enter
.tab
.delete
.esc
.space
.up
.down
.left 

ex) @keyup.ctrl.enter=""
=> 컨트롤+엔터를 눌렀을때만 이벤트 실행!

