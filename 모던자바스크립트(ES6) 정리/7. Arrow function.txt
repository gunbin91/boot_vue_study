▶ Arrow function ( ( )=> )
ES6이후부터는 function키워드 대신 => 화살표로 메서드를 제어할 수 있다.
function( ) // ( )=>

ex)
setTimeout(function(){ console.log("1초뒤 실행"); }, 1000);    
setTimeout( ()=> { console.log("1초뒤 실행"); }, 1000);    
    
let newArr = [1, 2, 3].map(function(v){ return v * 2 });
let newArr2 = [1, 2, 3].map((v)=>{ return v * 2 });
let newArr3 = [1, 2, 3].map((v)=> v * 2 );	=>	한 줄일 경우 ()=>는 return 없이 가능

▶ Arrow function의 this context
: ES5에서 객체 안에서 정의된 메서드의 this는 해당 인스턴스가 아닌 window를 가리킨다.
하지만, Arrow function을 사용할 경우 메서드 안의 this또한 해당 메서드를 호출한 인스턴스를 가리키게 됨
ex)
const myObj = {
    runTimeout(){
        setTimeout(function(){
            this.printData();
        }, 100);
    },
    
    printData(){
        console.log("hi");
    }
}
myObj.runTimeout();	
=>	printData()가 window객체의 메서드가 아니기 때문에 에러!
단, ES5에서도 
runTimeout(){
        setTimeout(function(){
            this.printData();
        }.bind(this), 100);
}
위와 같이 bind(this)로 해결은 가능하다.

ES6버전의 Arrow function즉
runTimeout(){
        setTimeout( () => {
            this.printData();
        }, 100);
}
을 사용한다면 bind없이 this는 printData()메서드 사용가능

▶ function default parameters
function sum(value, size={value:2}){
    console.log(value * size.value);
}
sum(3, {value:3});	=>	9
sum(3);		=>	6
=> 위와같이 메서드의 디폴트 값을 줄 수 있다.(객체가 아니여도 상관X)

▶ rest parameters
메서드의 파라미터는 argumetns를 사용하여 가변적으로 받을 수 있고, Array.from() 메서드를 이용하여 Array로 변환도 가능하다.
( toString.call()은 해당 객체타입을 확인하는 메서드 )
ex)
function checkNum(){
    console.log(toString.call(arguments));		=>	object Arguments
    console.log(toString.call(Array.from(arguments)))	=>	object Array
    console.log(Array.from(arguments));		=>	[10, 2, 3, 4, "aa"]
}
checkNum(10, 2, 3, 4, "aa");

=> arguments키워드 없이 바로 배열로 받을수도 있다!
 ...변수 를 파라미터로 사용하면 가능하다
ex)
function checkNum(...argArray){
    console.log(toString.call(argArray)		=>	Array
    const result = argArray.every((v)=> typeof v === "number")
}
checkNum(10, 2, 3, 4, "aa");		=>	false
checkNum(10, 2, 3, 4);		=>	true

* tip 
every메서드를 이용하면 배열의 모든 값의 타입이 어떤 타입으로 일치하는지 확인가능
ex)
function checkNum(...argArray){
    const result = argArray.every((v)=> typeof v === "number")
    console.log(result)
}
checkNum(10, 2, 3, 4, "aa");		=>	false
checkNum(10, 2, 3, 4);		=>	true

◆keyword
()=>, this, every