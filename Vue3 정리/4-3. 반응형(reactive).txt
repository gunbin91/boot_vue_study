◆ 반응형
: 스크립트에서 정의한 것들을 템플릿등에서 사용할 수 있도록 바인딩된 것

▶ reactive() 
: 반응형 객체를 생성하기 위해 reactive()함수를 사용, 
즉 배열이나 객체등 레퍼런스 객체에서만 사용가능( 기본타입(number, string, boolean ...) 사용불가 )
ex)
-------------------------------------------------------------------------------------
<template>
    <div>
        <button v-on:click="state.count++"> count : {{ state.count }}</button>
    </div>
</template>

<script>
import {ref, reactive} from 'vue'

export default {
    setup () {
        const state = reactive({
            count: 0,
        });

        return {state}
    }
}
</script>
-------------------------------------------------------------------------------------
=> OptionsAPI의 data()영역또한 내부적으로 reactive방식처럼 동작한다.


▶ ref()
: reactive()가 기본타입으로 사용이 불가능 하기때문에 기본 타입은 ref()를 이용하여 반응형 상태로 만든다.
ex)  const count = ref(0);

=> ref()는 reactive로 value속성값을 가지고 있는 객체로 반응형을 만든것?
그래서 ref()로 선언된 변수에 접근하기 위해서는 .value를 사용한다.


▶ ref()로 선언된 변수를 reactive()에서 사용
- 객체로 선언된 reactive에서 ref값의 사용은 .value를 해줄 필요가 없다.
ex) 
const count = ref(0);
const state = reactive({
	count,
});
console.log( state.count ) => 접근가능 (state.count.value는 undefined)

- 배열로 선언된 reactive에서 ref값의 사용은 .value를 사용한다.
ex) 
const message = ref('hello');
const arr = reactive({[message]);
console.log( arr[0].value )	=> .value로 접근

▶ 반응형 상태 재할당( toRef, toRefs )
: 반응형 상태를 새로운 변수에 재할당 할 경우 반응형 상태를 잃게된다.
따라서 반응형 상태를 유지하기 위해서는 toRef() 또는 toRefs()로 재할당 시켜주어야 한다.
ex) 
-------------------------------------------------------------------------------------
<script>
import {ref, reactive, toRef, toRefs} from 'vue'

export default {
    setup () {
        const state = reactive({
            count: 0,
            title: '좋다',
            time: '111',
        });

        const {count, title} = toRefs(state);	=>	여러개를 디렉티브할때
        const time = toRef(state, 'time');	=>	하나만 재할당할때

        return {state, count, time, title}, 
    }
}
</script>
-------------------------------------------------------------------------------------

▶ 읽기전용 재할당
: readonly(할당변수)를 통해 반응형 객체를 재할당하면, 재할당된 객체는 변경이 불가하다.
(경고 메시지만??,,)