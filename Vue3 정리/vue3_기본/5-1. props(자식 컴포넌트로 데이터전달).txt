◆ Props
: 컴포넌트에 등록할 수 있는 사용자 정의 속성으로
컴포넌트 내에서 props속성을 정의하면 props속성내 정의한 속성값(데이터)을
부모 컴포넌트로부터 전달받을 수 있다.

▶ 1. Props정의
: props속성은 자식 컴포넌트에서 받아올 속성을 정의하는 속성이다.
=> setup()에서 return하지 않아도 사용이 가능하다.

ex) PropsTest.vue
------------------------------------------------------------------------------------
<template>
    <div>
        <h2>PropsTest.Vue</h2>
        {{ title }} / {{ contents }}
    </div>
</template>

<script>
export default {
    setup () {
        return {}
    },
    props: ['title', 'contents'],
}
</script>
------------------------------------------------------------------------------------
=> 부모 객체로부터 title, contents속성을 받겠다는 의미

▶ 2. 부모 컴포넌트에서 호출 시 데이터 전달
: 데이터 전달은 컴포넌트 태그안에서 태그의 속성값처럼 전달해 주면 된다.
ex)
------------------------------------------------------------------------------------
<template>
  <PropsTest title="제목1" :contents="con"/>
</template>

<script>
import { ref } from "vue";
import PropsTest from "./components/PropsTest.vue"

export default {
  setup() {
    const con = ref('내용1');
    return {con};
  },
  components: {
    PropsTest
  },
};
</script>
------------------------------------------------------------------------------------

▶ props의 여러 표현방법
1. 속성명 단순 배열표현 
ex) props: ['title', 'contents']	=> 부모로부터 title, contents키값을 받을 수 있음

2. 객체로 표현
: 정해진 여러 키워드 사용으로 옵션을 설정할 수 있다.
ex) title, contents 예
props: {
        title:{
            type: String,		// 타입지정
            required: true,		// 필수값여부
            default: '디폴트제목',	// 디폴트값(넘겨주지 않아도 디폴트값으로 사용 가능하다)
            validator: value => {	// 벨리데이션 return false시 호출
                return value != '제목'
            }
        },
        contents:{
            type: String,
            required: false,
            default: '디폴트내용',
        },
        obj: {
	type: Object,
	default: () => { reutrn {} }	// 객체는 디폴트값을 함수리턴으로 설정!
        },
},

▶ setup에서 props 사용
: 전달받은 props데이터를 setup() 즉 스크립트에서도 사용하려면 
setup()함수의 첫번째 인자로 props를 받으면 된다.
ex) 
setup (props) {
        console.log('전달받은 타이틀: ', props.title);
        return {}
},

▶ $props
: OptionsAPI에서부터 쓰이던 방식으로 템플릿 내 {{ $props }}로도 데이터를 가져올 수 있다.

▶ props 네이밍 규칙
: props도 컴포넌트와 마찬가지로 케밥/카멜 케이스를 사용하며
공식 문서상에서는 
- 데이터 전달시 : 케밥( 단어 소문자 하이픈(-) )
- 전달 받을 시 : 카멜 ( 단어 대문자로구분 )

▶ props는 단방향 흐름이다.
- 부모 컴포넌트에서 전달 속성 변경시 => 자식 컴포넌트의 props값도 변경됨
- 자식 컴포넌트에서 전달받은 속성 변경시 => 부모 컴포넌트는 업데이트 되지 않음

=> 자식 컴포넌트의 값을 변경하기 위해서는, emit을 통해 이벤트를 부모 컴포넌트로 올려주어야 한다 (계속..