▶ Class
: ES5에서도 function을 이용하여 클래스 선언이 가능하다.
하지만 ES6이후에는 class 키워드가 추가되어 좀 더 쉽게 클래스를 사용할 수 있다.
* class키워드를 이용하여 생성하지만, class타입은 존재하지 않으며 내부적으로는 function으로 처리된다.
ES5 ex)
function Health(name){
    this.name = name;
}
Health.prototype.showHealth = function(){
    console.log(this.name + "님 안녕하세요.");
}
const h = new Health("crong");
h.showHealth();

///////////////////////////
ES6 ex)
class Health{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    
    showHealth(){
        console.log(`안녕하세요 ${name}님!`);
    }
}
    
const h = new Health("crong", 23);
h.showHealth();

▶ js객체 만들기
const healthObj = {
    showHealth: function(){
        console.log("오늘 운동시간: " + this.healthTime);
    }
}

healthObj.name = "aa";
healthObj.age = 23;
console.log(healthObj);			=>	healthObj자체가 객체이지만,
    
const myHealth = Object.create(healthObj);	=>	같은값의 다른 객체를 Object.create(객체)로 생성할 수 있다
console.log(myHealth);

const yourHealth = Object.assign(Object.create(healthObj), {	=> Object.assign을 사용하면 매개변수를 쉽게 바꿔서 생성할 수 있다.
    name: "crong",
    age: 32
});
console.log(yourHealth);

▶ setPrototypeOf()
: Object.assign과 같이 같은값의 다른 객체를 만드는 방법, prototype만 가져올 때 사용
( 두 객체를 합쳐 새로운 객체를 생성함, 일종의 상속 )
ex) 
const healthObj = {
    showHealth: function(){
        console.log("오늘 운동시간: " + this.healthTime);
    }
}

const newObj = Object.setPrototypeOf({
    name: "crong",
    age = 23
}, healthObj);
console.log(newObj);

◆ keyword
class, constructor, Object.create, Object.assign, Object.setPrototypeOf