◆ Composion API

▶ 반응형 API
: ref(), reactive()와 같은 API를 사용하여 반응상태를 만들 수 있다.
ex) 
아래 코드는 ref()로 선언되지 않은 변수는 위 템플릿에서 실시간으로 반응하지 않는다.
(Options API의 data()의 경우에는 기본 반응형)
-------------------------------------------------------------------------------------------
<template>
  <div>
    Vue3 Start
    <h3>반응형 메시지:</h3>
    <p>{{ reMessage }} <button v-on:click="remChange">반응버튼</button></p>
    <h3>일반 메시지:</h3>
    <p>{{ noMessage }} <button v-on:click="nomChange">일반버튼</button></p>
  </div>
</template>

<script>
import { ref } from "vue";

export default {
  setup() {
    const reMessage = ref("Hello World");
    const remChange = () => {
      reMessage.value = reMessage.value + "!";
    };

    let noMessage = "Hello World";
    let nomChange = () => {
      noMessage = noMessage + "!";
    };

    return {
      reMessage,
      noMessage,
      remChange,
      nomChange,
    };
  },
};
</script>
-------------------------------------------------------------------------------------------
** 스크립트 영역에서 변수값 접근시 .value를 사용한다.

▶ 라이프 사이클 훅
- Vue라이프 사이클: create(뷰인스턴스생성) - mount(DOM에 부착) - update - destroy
- 라이프 사이클 훅: 위 단계 중간중간 호출할 수 있는 함수
ex) onMounted(), onBeforeMount() ....

▶ 종속성 주입