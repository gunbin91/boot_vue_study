◆ class속성 바인딩
- class는 일반 속성과 다르게 v-bind:class와 일반 class 속성이 공존할 수 있으며, 
아래와 같이 true, false속성으로 넣고 뺄 수도 있다.
- 배열로도 선언이 가능하며, 스크립트 변수와 바인딩할 경우 따옴표(')없이 표기, 스타일에 정의된 클래스는 따옴표(')안에 표기
ex)
----------------------------------------------------------------------------------------
<template>
  <div>
    <div class="text" :class="{ 'text-red': true, bigText: true }">테스트</div>
    <div class="text" :class="['text-red', bigClasstest]">테스트</div>
    <div class="text" :class="[redClasstest, bigClasstest]">테스트</div>
  </div>
</template>

<script>
import { ref } from "vue";

export default {
  setup() {
    const redClasstest = ref("text-red");
    const bigClasstest = ref("bigText");
    return { redClasstest, bigClasstest };
  },
};
</script>

<style scoped>
.text-red {
  color: red;
}

.bigText {
  font-size: 50px;
}
</style>
----------------------------------------------------------------------------------------


▶ 인라인 style 바인딩
: 스타일을 자바스크립트 객체와 바인딩 시킬수도 있다.
ex) 
----------------------------------------------------------------------------------------
<template>
  <div>
    <p :style="styleObj">테스트</p>
    <button v-on:click="fs++">+</button>
    <button v-on:click="fs--">-</button>
  </div>
</template>

<script>
import { reactive, ref, computed } from "vue";
export default {
  setup() {
    const fs = ref(15);
    const styleObj = computed(() => {
      return {
        color: "red",
        fontSize: fs.value + "px",
      };
    });

    return { styleObj, fs };
  },
};
</script>
----------------------------------------------------------------------------------------
** 주의) 자바스크립트에서 스타일 속성을 객체로 생성할때 속성명은 카멜법칙을 따르며, 
실제 스타일에서는 이를 알아서 변환하여 인식하게 된다.
ex) 스크립트 fontSize -> CSS font-size