◆ Template refs
: Vue에서 제공하는 DOM객체 접근 방식

1. 접근하고자 하는 DOM객체의 ref속성으로 변수명 입력
2. ref속성에 입력한 변수명으로 변수선언 후 ref(null)로 주입
3. return{}
------------------------------------------------------------------------------------
<template>
    <div>
        <h2>RefTemplate</h2>
        <input ref="refInput" value="메롱"/>
        <br/>
        <div v-if="refInput">{{ refInput.value }}</div>
    </div>
</template>

<script>
import { onMounted, ref } from 'vue';

export default {
    setup () {
        const refInput = ref(null);
        console.log(refInput.value);	// undefined

        onMounted(()=>{
            // refInput.value.value = '마운트!!';
            console.log('엘리먼트: ', refInput.value);
            console.log('엘리먼트 벨류값: ', refInput.value.value);
        });

        return { refInput }
    },
}
</script>
------------------------------------------------------------------------------------

** DOM객체는 마운트된 이후에 제어가 가능하기 때문에 DOM객체 제어는
onMounted()함수에서 처리한다!!

** ref(null)로 가져온 객체의 .value는 엘리먼트를 의미하기 때문에,
해당 객체의 진짜 value 속성값을 가져오고자 할때는 .value.value를 사용해야 한다.

** template안에서 해당 객체변수를 접근할때 마운트되기전 에러가 발생할 수 있으니
v-if를 통해 적절히 사용 해야하며,
template안에서는 $refs.변수명 으로 참조가 가능하다.

▶ v-for 객체접근
: v-for로 정의한 객체는 ref( [ ] ) 로 주입받으면 된다.

ex) 기본 참조
------------------------------------------------------------------------------------
...
<li v-for="fruit in fruits" :key="fruit" ref="refFruit">{{ fruit }}</li>
...
<script>
...
const refFruit = ref([]);
onMounted(() => {
	refFruit .value.forEach(item => console.log('item: ', item.textContent);
});
</script>
------------------------------------------------------------------------------------

ex) 함수를 통해 주입받을 경우
------------------------------------------------------------------------------------
...
<li v-for="fruit in fruits" :key="fruit" :ref="el => refFruit.push(el.textContent)">{{ fruit }}</li>
...
<script>
...
const refFruit = ref([]);
onMounted(() => {
	refFruit .value.forEach(item => console.log('item: ', item);
});
</script>
------------------------------------------------------------------------------------

▶ 컴포넌트 ref
: 컴포넌트 태그에도 ref를 사용하여 하위 객체에서 선언한 스크립트 변수 또는 메서드를 참조할 수 있다.
ex)
<하위컴포넌트 ref="child"></하위컴포넌트>
<script>
const child = ref(null);
child.value.message	=>	하위 컴포넌트에서 선언한 message접근
</script>

** 단,
부모/자식 컴포넌트간 의존도가 생기기 때문에 
이러한 방법은 반드시 필요한 경우에만 사용해야 한다. 
그리고 일반적으로 ref 보다 표준 props를 사용하여 
부모/자식간 상호작용을 구현해야 합니다.

▶ $parent
: 상위 컴포넌트에 선언된 데이터를 접근할 수 있도록 하는 전역 키워드
=> 마찬가지로 표준 props, emit 방식으로 접근하는것이 좋다.